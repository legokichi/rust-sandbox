// This file is generated by rust-protobuf 2.22.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `a.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_1;

#[derive(PartialEq,Clone,Default)]
pub struct GetRequest {
    // message fields
    pub name: ::std::string::String,
    pub age: i32,
    pub features: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetRequest {
    fn default() -> &'a GetRequest {
        <GetRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetRequest {
    pub fn new() -> GetRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 age = 2;


    pub fn get_age(&self) -> i32 {
        self.age
    }
    pub fn clear_age(&mut self) {
        self.age = 0;
    }

    // Param is passed by value, moved
    pub fn set_age(&mut self, v: i32) {
        self.age = v;
    }

    // repeated string features = 3;


    pub fn get_features(&self) -> &[::std::string::String] {
        &self.features
    }
    pub fn clear_features(&mut self) {
        self.features.clear();
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.features = v;
    }

    // Mutable pointer to the field.
    pub fn mut_features(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.features
    }

    // Take field
    pub fn take_features(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.features, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.age = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.features)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.age != 0 {
            my_size += ::protobuf::rt::value_size(2, self.age, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.features {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.age != 0 {
            os.write_int32(2, self.age)?;
        }
        for v in &self.features {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetRequest {
        GetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetRequest| { &m.name },
                |m: &mut GetRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "age",
                |m: &GetRequest| { &m.age },
                |m: &mut GetRequest| { &mut m.age },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "features",
                |m: &GetRequest| { &m.features },
                |m: &mut GetRequest| { &mut m.features },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetRequest>(
                "GetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetRequest {
        static instance: ::protobuf::rt::LazyV2<GetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetRequest::new)
    }
}

impl ::protobuf::Clear for GetRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.age = 0;
        self.features.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResponse {
    // message fields
    pub status: GetResponse_Status,
    pub address: ::std::string::String,
    pub city: ::std::string::String,
    pub zipcode: i32,
    pub ts: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // message oneof groups
    pub data: ::std::option::Option<GetResponse_oneof_data>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResponse {
    fn default() -> &'a GetResponse {
        <GetResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GetResponse_oneof_data {
    domain_network(DomainNetwork),
    local_network(LocalNetwork),
    multicast_network(MulticastNetwork),
}

impl GetResponse {
    pub fn new() -> GetResponse {
        ::std::default::Default::default()
    }

    // .GetResponse.Status status = 1;


    pub fn get_status(&self) -> GetResponse_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = GetResponse_Status::OK;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: GetResponse_Status) {
        self.status = v;
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string city = 3;


    pub fn get_city(&self) -> &str {
        &self.city
    }
    pub fn clear_city(&mut self) {
        self.city.clear();
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        &mut self.city
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.city, ::std::string::String::new())
    }

    // int32 zipcode = 4;


    pub fn get_zipcode(&self) -> i32 {
        self.zipcode
    }
    pub fn clear_zipcode(&mut self) {
        self.zipcode = 0;
    }

    // Param is passed by value, moved
    pub fn set_zipcode(&mut self, v: i32) {
        self.zipcode = v;
    }

    // .google.protobuf.Timestamp ts = 5;


    pub fn get_ts(&self) -> &::protobuf::well_known_types::Timestamp {
        self.ts.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ts(&mut self) {
        self.ts.clear();
    }

    pub fn has_ts(&self) -> bool {
        self.ts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ts(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.ts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ts(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.ts.is_none() {
            self.ts.set_default();
        }
        self.ts.as_mut().unwrap()
    }

    // Take field
    pub fn take_ts(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.ts.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .DomainNetwork domain_network = 10;


    pub fn get_domain_network(&self) -> &DomainNetwork {
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::domain_network(ref v)) => v,
            _ => <DomainNetwork as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_domain_network(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_domain_network(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::domain_network(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_domain_network(&mut self, v: DomainNetwork) {
        self.data = ::std::option::Option::Some(GetResponse_oneof_data::domain_network(v))
    }

    // Mutable pointer to the field.
    pub fn mut_domain_network(&mut self) -> &mut DomainNetwork {
        if let ::std::option::Option::Some(GetResponse_oneof_data::domain_network(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(GetResponse_oneof_data::domain_network(DomainNetwork::new()));
        }
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::domain_network(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_domain_network(&mut self) -> DomainNetwork {
        if self.has_domain_network() {
            match self.data.take() {
                ::std::option::Option::Some(GetResponse_oneof_data::domain_network(v)) => v,
                _ => panic!(),
            }
        } else {
            DomainNetwork::new()
        }
    }

    // .LocalNetwork local_network = 11;


    pub fn get_local_network(&self) -> &LocalNetwork {
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::local_network(ref v)) => v,
            _ => <LocalNetwork as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_local_network(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_local_network(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::local_network(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local_network(&mut self, v: LocalNetwork) {
        self.data = ::std::option::Option::Some(GetResponse_oneof_data::local_network(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local_network(&mut self) -> &mut LocalNetwork {
        if let ::std::option::Option::Some(GetResponse_oneof_data::local_network(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(GetResponse_oneof_data::local_network(LocalNetwork::new()));
        }
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::local_network(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local_network(&mut self) -> LocalNetwork {
        if self.has_local_network() {
            match self.data.take() {
                ::std::option::Option::Some(GetResponse_oneof_data::local_network(v)) => v,
                _ => panic!(),
            }
        } else {
            LocalNetwork::new()
        }
    }

    // .MulticastNetwork multicast_network = 12;


    pub fn get_multicast_network(&self) -> &MulticastNetwork {
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(ref v)) => v,
            _ => <MulticastNetwork as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_multicast_network(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_multicast_network(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multicast_network(&mut self, v: MulticastNetwork) {
        self.data = ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multicast_network(&mut self) -> &mut MulticastNetwork {
        if let ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(MulticastNetwork::new()));
        }
        match self.data {
            ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multicast_network(&mut self) -> MulticastNetwork {
        if self.has_multicast_network() {
            match self.data.take() {
                ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(v)) => v,
                _ => panic!(),
            }
        } else {
            MulticastNetwork::new()
        }
    }
}

impl ::protobuf::Message for GetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.ts {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(GetResponse_oneof_data::domain_network(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GetResponse_oneof_data::local_network(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GetResponse_oneof_data::multicast_network(ref v)) = self.data {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.city)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.zipcode = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ts)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(GetResponse_oneof_data::domain_network(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(GetResponse_oneof_data::local_network(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.data = ::std::option::Option::Some(GetResponse_oneof_data::multicast_network(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != GetResponse_Status::OK {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if !self.city.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.city);
        }
        if self.zipcode != 0 {
            my_size += ::protobuf::rt::value_size(4, self.zipcode, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &GetResponse_oneof_data::domain_network(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GetResponse_oneof_data::local_network(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GetResponse_oneof_data::multicast_network(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != GetResponse_Status::OK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if !self.city.is_empty() {
            os.write_string(3, &self.city)?;
        }
        if self.zipcode != 0 {
            os.write_int32(4, self.zipcode)?;
        }
        if let Some(ref v) = self.ts.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &GetResponse_oneof_data::domain_network(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GetResponse_oneof_data::local_network(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GetResponse_oneof_data::multicast_network(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResponse {
        GetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GetResponse_Status>>(
                "status",
                |m: &GetResponse| { &m.status },
                |m: &mut GetResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &GetResponse| { &m.address },
                |m: &mut GetResponse| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "city",
                |m: &GetResponse| { &m.city },
                |m: &mut GetResponse| { &mut m.city },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "zipcode",
                |m: &GetResponse| { &m.zipcode },
                |m: &mut GetResponse| { &mut m.zipcode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "ts",
                |m: &GetResponse| { &m.ts },
                |m: &mut GetResponse| { &mut m.ts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DomainNetwork>(
                "domain_network",
                GetResponse::has_domain_network,
                GetResponse::get_domain_network,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LocalNetwork>(
                "local_network",
                GetResponse::has_local_network,
                GetResponse::get_local_network,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MulticastNetwork>(
                "multicast_network",
                GetResponse::has_multicast_network,
                GetResponse::get_multicast_network,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetResponse>(
                "GetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetResponse {
        static instance: ::protobuf::rt::LazyV2<GetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetResponse::new)
    }
}

impl ::protobuf::Clear for GetResponse {
    fn clear(&mut self) {
        self.status = GetResponse_Status::OK;
        self.address.clear();
        self.city.clear();
        self.zipcode = 0;
        self.ts.clear();
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GetResponse_Status {
    OK = 0,
    ERR = 1,
    NOT_FOUND = 2,
}

impl ::protobuf::ProtobufEnum for GetResponse_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GetResponse_Status> {
        match value {
            0 => ::std::option::Option::Some(GetResponse_Status::OK),
            1 => ::std::option::Option::Some(GetResponse_Status::ERR),
            2 => ::std::option::Option::Some(GetResponse_Status::NOT_FOUND),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GetResponse_Status] = &[
            GetResponse_Status::OK,
            GetResponse_Status::ERR,
            GetResponse_Status::NOT_FOUND,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<GetResponse_Status>("GetResponse.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for GetResponse_Status {
}

impl ::std::default::Default for GetResponse_Status {
    fn default() -> Self {
        GetResponse_Status::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResponse_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DomainNetwork {
    // message fields
    pub domain: ::std::string::String,
    pub port: u32,
    pub protocol: TransportLayerProtocol,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DomainNetwork {
    fn default() -> &'a DomainNetwork {
        <DomainNetwork as ::protobuf::Message>::default_instance()
    }
}

impl DomainNetwork {
    pub fn new() -> DomainNetwork {
        ::std::default::Default::default()
    }

    // string domain = 1;


    pub fn get_domain(&self) -> &str {
        &self.domain
    }
    pub fn clear_domain(&mut self) {
        self.domain.clear();
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::std::string::String) {
        self.domain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut ::std::string::String {
        &mut self.domain
    }

    // Take field
    pub fn take_domain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.domain, ::std::string::String::new())
    }

    // uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }

    // .TransportLayerProtocol protocol = 3;


    pub fn get_protocol(&self) -> TransportLayerProtocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = TransportLayerProtocol::TCP;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: TransportLayerProtocol) {
        self.protocol = v;
    }
}

impl ::protobuf::Message for DomainNetwork {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.domain)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.protocol != TransportLayerProtocol::TCP {
            my_size += ::protobuf::rt::enum_size(3, self.protocol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        if self.protocol != TransportLayerProtocol::TCP {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DomainNetwork {
        DomainNetwork::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "domain",
                |m: &DomainNetwork| { &m.domain },
                |m: &mut DomainNetwork| { &mut m.domain },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &DomainNetwork| { &m.port },
                |m: &mut DomainNetwork| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransportLayerProtocol>>(
                "protocol",
                |m: &DomainNetwork| { &m.protocol },
                |m: &mut DomainNetwork| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DomainNetwork>(
                "DomainNetwork",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DomainNetwork {
        static instance: ::protobuf::rt::LazyV2<DomainNetwork> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DomainNetwork::new)
    }
}

impl ::protobuf::Clear for DomainNetwork {
    fn clear(&mut self) {
        self.domain.clear();
        self.port = 0;
        self.protocol = TransportLayerProtocol::TCP;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DomainNetwork {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DomainNetwork {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalNetwork {
    // message fields
    pub local_addr: bool,
    pub port: u32,
    pub protocol: TransportLayerProtocol,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalNetwork {
    fn default() -> &'a LocalNetwork {
        <LocalNetwork as ::protobuf::Message>::default_instance()
    }
}

impl LocalNetwork {
    pub fn new() -> LocalNetwork {
        ::std::default::Default::default()
    }

    // bool local_addr = 1;


    pub fn get_local_addr(&self) -> bool {
        self.local_addr
    }
    pub fn clear_local_addr(&mut self) {
        self.local_addr = false;
    }

    // Param is passed by value, moved
    pub fn set_local_addr(&mut self, v: bool) {
        self.local_addr = v;
    }

    // uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }

    // .TransportLayerProtocol protocol = 3;


    pub fn get_protocol(&self) -> TransportLayerProtocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = TransportLayerProtocol::TCP;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: TransportLayerProtocol) {
        self.protocol = v;
    }
}

impl ::protobuf::Message for LocalNetwork {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.local_addr = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.local_addr != false {
            my_size += 2;
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.protocol != TransportLayerProtocol::TCP {
            my_size += ::protobuf::rt::enum_size(3, self.protocol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.local_addr != false {
            os.write_bool(1, self.local_addr)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        if self.protocol != TransportLayerProtocol::TCP {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalNetwork {
        LocalNetwork::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "local_addr",
                |m: &LocalNetwork| { &m.local_addr },
                |m: &mut LocalNetwork| { &mut m.local_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &LocalNetwork| { &m.port },
                |m: &mut LocalNetwork| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransportLayerProtocol>>(
                "protocol",
                |m: &LocalNetwork| { &m.protocol },
                |m: &mut LocalNetwork| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalNetwork>(
                "LocalNetwork",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalNetwork {
        static instance: ::protobuf::rt::LazyV2<LocalNetwork> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalNetwork::new)
    }
}

impl ::protobuf::Clear for LocalNetwork {
    fn clear(&mut self) {
        self.local_addr = false;
        self.port = 0;
        self.protocol = TransportLayerProtocol::TCP;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalNetwork {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalNetwork {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MulticastNetwork {
    // message fields
    pub multicast_addr: ::std::string::String,
    pub port: u32,
    pub protocol: TransportLayerProtocol,
    pub direction: Direction,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulticastNetwork {
    fn default() -> &'a MulticastNetwork {
        <MulticastNetwork as ::protobuf::Message>::default_instance()
    }
}

impl MulticastNetwork {
    pub fn new() -> MulticastNetwork {
        ::std::default::Default::default()
    }

    // string multicast_addr = 1;


    pub fn get_multicast_addr(&self) -> &str {
        &self.multicast_addr
    }
    pub fn clear_multicast_addr(&mut self) {
        self.multicast_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_addr(&mut self, v: ::std::string::String) {
        self.multicast_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_addr(&mut self) -> &mut ::std::string::String {
        &mut self.multicast_addr
    }

    // Take field
    pub fn take_multicast_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multicast_addr, ::std::string::String::new())
    }

    // uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }

    // .TransportLayerProtocol protocol = 3;


    pub fn get_protocol(&self) -> TransportLayerProtocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = TransportLayerProtocol::TCP;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: TransportLayerProtocol) {
        self.protocol = v;
    }

    // .Direction direction = 4;


    pub fn get_direction(&self) -> Direction {
        self.direction
    }
    pub fn clear_direction(&mut self) {
        self.direction = Direction::SEND;
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: Direction) {
        self.direction = v;
    }
}

impl ::protobuf::Message for MulticastNetwork {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multicast_addr)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.direction, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multicast_addr);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.protocol != TransportLayerProtocol::TCP {
            my_size += ::protobuf::rt::enum_size(3, self.protocol);
        }
        if self.direction != Direction::SEND {
            my_size += ::protobuf::rt::enum_size(4, self.direction);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_addr.is_empty() {
            os.write_string(1, &self.multicast_addr)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        if self.protocol != TransportLayerProtocol::TCP {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        if self.direction != Direction::SEND {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.direction))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulticastNetwork {
        MulticastNetwork::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "multicast_addr",
                |m: &MulticastNetwork| { &m.multicast_addr },
                |m: &mut MulticastNetwork| { &mut m.multicast_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &MulticastNetwork| { &m.port },
                |m: &mut MulticastNetwork| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransportLayerProtocol>>(
                "protocol",
                |m: &MulticastNetwork| { &m.protocol },
                |m: &mut MulticastNetwork| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Direction>>(
                "direction",
                |m: &MulticastNetwork| { &m.direction },
                |m: &mut MulticastNetwork| { &mut m.direction },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MulticastNetwork>(
                "MulticastNetwork",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MulticastNetwork {
        static instance: ::protobuf::rt::LazyV2<MulticastNetwork> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MulticastNetwork::new)
    }
}

impl ::protobuf::Clear for MulticastNetwork {
    fn clear(&mut self) {
        self.multicast_addr.clear();
        self.port = 0;
        self.protocol = TransportLayerProtocol::TCP;
        self.direction = Direction::SEND;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulticastNetwork {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastNetwork {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransportLayerProtocol {
    TCP = 0,
    UDP = 1,
}

impl ::protobuf::ProtobufEnum for TransportLayerProtocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransportLayerProtocol> {
        match value {
            0 => ::std::option::Option::Some(TransportLayerProtocol::TCP),
            1 => ::std::option::Option::Some(TransportLayerProtocol::UDP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransportLayerProtocol] = &[
            TransportLayerProtocol::TCP,
            TransportLayerProtocol::UDP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TransportLayerProtocol>("TransportLayerProtocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TransportLayerProtocol {
}

impl ::std::default::Default for TransportLayerProtocol {
    fn default() -> Self {
        TransportLayerProtocol::TCP
    }
}

impl ::protobuf::reflect::ProtobufValue for TransportLayerProtocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Direction {
    SEND = 0,
    RECV = 1,
}

impl ::protobuf::ProtobufEnum for Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Direction> {
        match value {
            0 => ::std::option::Option::Some(Direction::SEND),
            1 => ::std::option::Option::Some(Direction::RECV),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Direction] = &[
            Direction::SEND,
            Direction::RECV,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Direction>("Direction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Direction {
}

impl ::std::default::Default for Direction {
    fn default() -> Self {
        Direction::SEND
    }
}

impl ::protobuf::reflect::ProtobufValue for Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x07a.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"N\n\nGetRequest\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x10\n\x03age\x18\x02\
    \x20\x01(\x05R\x03age\x12\x1a\n\x08features\x18\x03\x20\x03(\tR\x08featu\
    res\"\x91\x03\n\x0bGetResponse\x12+\n\x06status\x18\x01\x20\x01(\x0e2\
    \x13.GetResponse.StatusR\x06status\x12\x18\n\x07address\x18\x02\x20\x01(\
    \tR\x07address\x12\x12\n\x04city\x18\x03\x20\x01(\tR\x04city\x12\x18\n\
    \x07zipcode\x18\x04\x20\x01(\x05R\x07zipcode\x12*\n\x02ts\x18\x05\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x02ts\x127\n\x0edomain_network\
    \x18\n\x20\x01(\x0b2\x0e.DomainNetworkH\0R\rdomainNetwork\x124\n\rlocal_\
    network\x18\x0b\x20\x01(\x0b2\r.LocalNetworkH\0R\x0clocalNetwork\x12@\n\
    \x11multicast_network\x18\x0c\x20\x01(\x0b2\x11.MulticastNetworkH\0R\x10\
    multicastNetwork\"(\n\x06Status\x12\x06\n\x02OK\x10\0\x12\x07\n\x03ERR\
    \x10\x01\x12\r\n\tNOT_FOUND\x10\x02B\x06\n\x04data\"p\n\rDomainNetwork\
    \x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\x12\x12\n\x04port\x18\
    \x02\x20\x01(\rR\x04port\x123\n\x08protocol\x18\x03\x20\x01(\x0e2\x17.Tr\
    ansportLayerProtocolR\x08protocol\"v\n\x0cLocalNetwork\x12\x1d\n\nlocal_\
    addr\x18\x01\x20\x01(\x08R\tlocalAddr\x12\x12\n\x04port\x18\x02\x20\x01(\
    \rR\x04port\x123\n\x08protocol\x18\x03\x20\x01(\x0e2\x17.TransportLayerP\
    rotocolR\x08protocol\"\xac\x01\n\x10MulticastNetwork\x12%\n\x0emulticast\
    _addr\x18\x01\x20\x01(\tR\rmulticastAddr\x12\x12\n\x04port\x18\x02\x20\
    \x01(\rR\x04port\x123\n\x08protocol\x18\x03\x20\x01(\x0e2\x17.TransportL\
    ayerProtocolR\x08protocol\x12(\n\tdirection\x18\x04\x20\x01(\x0e2\n.Dire\
    ctionR\tdirection**\n\x16TransportLayerProtocol\x12\x07\n\x03TCP\x10\0\
    \x12\x07\n\x03UDP\x10\x01*\x1f\n\tDirection\x12\x08\n\x04SEND\x10\0\x12\
    \x08\n\x04RECV\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
